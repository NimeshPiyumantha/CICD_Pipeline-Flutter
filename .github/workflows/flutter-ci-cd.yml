name: Flutter CI/CD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required for creating releases
      packages: write # Required for uploading release assets

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'

    - name: Install dependencies
      run: flutter pub get

    - name: Run tests
      run: flutter test

    - name: Build APK
      run: flutter build apk --release

    - name: Extract Version from pubspec.yaml
      id: extract_version
      run: |
        VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '"')
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        UNIQUE_VERSION="${VERSION}-${TIMESTAMP}"
        echo "Extracted version: $UNIQUE_VERSION"
        echo "version=$UNIQUE_VERSION" >> $GITHUB_ENV

    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk

  create-release:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/

    - name: Check if Tag Exists
      id: check_tag
      run: |
        if git ls-remote --tags origin | grep -q "refs/tags/v${{ env.version }}"; then
          echo "Tag already exists. Skipping release creation."
          echo "tag_exists=true" >> $GITHUB_ENV
        else
          echo "tag_exists=false" >> $GITHUB_ENV
        fi

    - name: Create GitHub Release
      if: env.tag_exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
      with:
        tag_name: v${{ env.version }}
        release_name: Release v${{ env.version }}
        draft: false
        prerelease: false

    - name: Upload APK to Release
      if: env.tag_exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-release.apk
        asset_name: app-release.apk
        asset_content_type: application/vnd.android.package-archive